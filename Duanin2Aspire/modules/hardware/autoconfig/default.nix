# Do not modify this file!	It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.	Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
	imports =
		[ (modulesPath + "/installer/scan/not-detected.nix")
		];

	boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usb_storage" "sd_mod" "sr_mod" "rtsx_pci_sdmmc" ];
	boot.initrd.kernelModules = [ ];
	boot.kernelModules = [ "kvm-intel" ];
	boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/mapper/RootFS";
    fsType = "btrfs";
    neededForBoot = true;
    options = [
      "subvol=rootfs"
      "compress-force=zstd:4"
    ];
  };

  fileSystems."/persist" = {
    device = "/dev/mapper/RootFS";
    fsType = "btrfs";    
    neededForBoot = true;
    options = [
      "subvol=persist"
      "compress-force=zstd:4"
    ];
  };

  fileSystems."/nix" = {
    device = "/dev/mapper/RootFS";
    fsType = "btrfs";    
    neededForBoot = true;
    options = [
      "subvol=nix"
      "compress-force=zstd:4"
    ];
  };

  fileSystems."/boot" = {
    device = "/dev/mapper/RootFS";
    fsType = "btrfs";    
    neededForBoot = true;
    options = [
      "subvol=boot"
      "compress-force=zstd:4"
    ];
  };

  fileSystems."/efi" = {
    device = "/dev/disk/by-label/ESP";
    fsType = "vfat";
  };

  boot.initrd.luks.devices."RootFS" = {
    device = "/dev/disk/by-partlabel/LUKS";
    postOpenCommands = lib.mkAfter ''
TEMPMNT=/tmp/tempMnt

echo "mounting to $TEMPMNT..."
mkdir -p $TEMPMNT
mount /dev/mapper/RootFS $TEMPMNT

echo "rolling $TEMPMNT back to empty..."
rm -rf $TEMPMNT/rootfs
btrfs subvolume snapshot $TEMPMNT/.snapshots/rootfs-empty $TEMPMNT/rootfs

echo "unmounting from $TEMPMNT..."
umount $TEMPMNT
rm -rf $TEMPMNT
    '';
    bypassWorkqueues = true;
    allowDiscards = true;
  };

	swapDevices = [
    {
      device = "/persist/swap/swapfile";
      priority = 0;
    }
  ];
	zramSwap = {
	  writebackDevice = "/persist/swap/swapfile-writeback";
	};

	# Enables DHCP on each ethernet and wireless interface. In case of scripted networking
	# (the default) this is the recommended approach. When using systemd-networkd it's
	# still possible to use this option, but it's recommended to use it in conjunction
	# with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
	networking.useDHCP = lib.mkDefault true;
	# networking.interfaces.enp4s0f1.useDHCP = lib.mkDefault true;
	# networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

	nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
	hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
